* package management
Done in separate file. my_package_management.el
* auto complete

#+BEGIN_SRC emacs-lisp
;;Autocomplete Config
(load "~/emacsBackup/alex_customizations/my_autocomplete")
#+END_SRC  
* basic settings


#+BEGIN_SRC emacs-lisp
;;Mac key rebinds
(setq mac-option-modifier 'control)
(setq mac-command-modifier 'meta)
(setq mac-control-modifier 'super)

;;tell tramp to use ssh
(setq tramp-default-method "ssh")



;; Enable line numbers in all files. 
 (global-linum-mode 1)

;; Hide splash screen & banner
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)  

;; Enable auto-indenting
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Add new lines if using C-n at the end of the buffer
(setq next-line-add-newlines t)

;; Use Zenburn Theme
;; Theme must be stored in "~/emacsBackup/.emacs.d/themes"
;; Theme available @ wikemacs.org/wiki/Zenburn-theme
(add-to-list 'custom-theme-load-path "~/emacsBackup/.emacs.d/themes/")
(load-theme 'zenburn t)

;; Start with subword mode on
;; easier navigation of camelCase
(load "subword.el")
(global-subword-mode 1)
;; Turn on Visible Mark
(add-to-list 'load-path "~/emacsBackup/.emacs.d/general-tools/")
(load "visible-mark.el")

;; Turn on Whitespace Mode
(require 'whitespace)
(setq whitespace-style '(face lines-tail))
(global-whitespace-mode t)
(setq whitespace-global-modes '(c-mode c++-mode cuda-mode web-mode python-mode php-mode))

;; show highlight hex colors with that color
(setq-default rainbow-mode 1)


;;Display tabs as 4 spaces.
(setq-default tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

;;Next line moves to next ACTUAL line
;;ignores word wrap
(setq line-move-visual 'nil)

(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq buffer-file-coding-system 'utf-8)

(autoload 'wc-mode "wc-mode")


;;Activate up and down transposing
(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  )

(global-set-key (kbd "<M-down>") 'move-line-down)
(global-set-key (kbd "<M-up>") 'move-line-up)

(define-key minibuffer-local-map "\M-s" nil)

(require 'flycheck )
#+END_SRC  
* Better defaults
#+BEGIN_SRC emacs-lisp
;;; my_better_defaults.el --- my adaptation of better defaults
;;; Commentary:
;;; Code:
(unless (fboundp 'helm-mode)
  (ido-mode t)
  (setq ido-enable-flex-matching t))

(menu-bar-mode -1)
(when (fboundp 'tool-bar-mode)
  (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))

(autoload 'zap-up-to-char "misc"
  "Kill up to, but not including ARGth occurrence of CHAR." t)

(require 'uniquify )
(setq uniquify-buffer-name-style 'forward)

(require 'saveplace)
(setq-default save-place t)

(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-z") 'zap-up-to-char)

(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

(show-paren-mode 1)
(setq x-select-enable-clipboard t
      x-select-enable-primary t
      save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      visible-bell nil
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain
      save-place-file (concat user-emacs-directory "places")
      backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))

;;; my_better_defaults.el ends here
#+END_SRC  
* helm

;;#+BEGIN_SRC emacs-lisp
;; HELM setup
(require 'helm)
(setq helm-ff-transformer-show-only-basename nil
      helm-adaptive-history-file             "~/emacsBackup/.emacs.d/data/helm-history"
      helm-yank-symbol-first                 t
      helm-move-to-line-cycle-in-source      t
      helm-buffers-fuzzy-matching            t
      helm-ff-auto-update-initial-value      t)

(autoload 'helm-descbinds      "helm-descbinds" t)
(autoload 'helm-eshell-history "helm-eshell"    t)
(autoload 'helm-esh-pcomplete  "helm-eshell"    t)
(helm-autoresize-mode t)

(require 'helm-config)
(helm-mode t)
(helm-adaptive-mode t)

(require 'helm-projectile)
(setq helm-projectile-sources-list (cons 'helm-source-projectile-files-list
                                         (remove 'helm-source-projectile-files-list 
                                              helm-projectile-sources-list)))
(helm-projectile-on)

(define-key projectile-mode-map (kbd "C-c p /")
  #'(lambda ()
      (interactive)
      (helm-ag (projectile-project-root))))

(require 'helm-flyspell)

;; add flyspell correction to helm
(add-hook 'after-init-hook #'global-flycheck-mode)
(define-key flyspell-mode-map (kbd "C-;") 'helm-flyspell-correct)
(define-key flycheck-mode-map (kbd "C-;") 'helm-flycheck)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)

;;(setq helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window

  ;;    helm-echo-input-in-header-line t) ;; input close to where I type

(defun spacemacs//helm-hide-minibuffer-maybe ()
  "Hide minibuffer in Helm session if we use the header line as input field."
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
                   (let ((bg-color (face-background 'default nil)))
                     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))

(add-hook 'helm-minibuffer-set-up-hook
      'spacemacs//helm-hide-minibuffer-maybe)

;;(setq helm-autoresize-max-height 0)
;;(setq helm-autoresize-min-height 20)
;;(helm-autoresize-mode 1)
(setq helm-idle-delay 0.01)
(setq helm-input-idle-delay 0.01)


;; Now Helm always appears at the bottom, taking full frame width like your trusty ido and has 40% frame height. Adjust the height to your liking.
(add-to-list 'display-buffer-alist
                    `(,(rx bos "*helm" (* not-newline) "*" eos)
                         (display-buffer-in-side-window)
                         (inhibit-same-window . t)
                         (window-height . 0.4)))


(add-to-list 'ac-dictionary-directories "~/emacsBackup/.emacs.d/general-tools/ac-helm")
(autoload 'helm-org-rifle "helm-org-rifle" )
(global-set-key (kbd "C-x c!")   #'helm-calcul-expression)
(global-set-key (kbd "C-x c:")   #'helm-eval-expression-with-eldoc)
(define-key helm-map (kbd "M-o") #'helm-previous-source)

(global-set-key (kbd "M-s s")   #'helm-ag)


(global-set-key (kbd "C-h a")    #'helm-apropos)
(global-set-key (kbd "C-h i")    #'helm-info-emacs)
(global-set-key (kbd "C-h b")    #'helm-descbinds)
(global-set-key (kbd "C-x b")   #'helm-mini)
(global-set-key (kbd "C-x C-b") #'helm-buffers-list)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "C-x C-r") #'helm-recentf)
(global-set-key (kbd "C-x r l") #'helm-filtered-bookmarks)
(global-set-key (kbd "M-y")     #'helm-show-kill-ring)
(global-set-key (kbd "M-s o")   #'helm-swoop)
(global-set-key (kbd "M-s /")   #'helm-multi-swoop)
(global-set-key "\C-cC-r" 'helm-org-rifle-org-directory)
(global-set-key "\C-cr" 'helm-org-rifle)

(provide 'my_helm)
(require 'helm-ido-like)
(helm-ido-like)

;;; my_helm.el ends here

;;#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp
;; ivy still doesn't seem to be ready for use.
;; sticking to helm as of 3/10/2017

(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  :bind
  (:map ivy-mode-map
   ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))


(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "M-x") #'counsel-M-x)
(global-set-key (kbd "C-x C-r") #'counsel-recentf)
(global-set-key (kbd "C-x b")   #'ivy-switch-buffer)
#+END_SRC  
* org
#+BEGIN_SRC emacs-lisp

;;SET UP ORG MODE
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

;;Define Default Workflow States
(setq org-todo-keywords
      '((sequence "TODO" "DONE")))

;; set key for agenda

(define-key global-map "\C-cl" 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)

(setq org-log-done t)

;;file to save todo items
(setq org-agenda-files (quote ("~/Dropbox/org/")))

;;set priority range from A to C with default A
(setq org-highest-priority ?A)
(setq org-lowest-priority ?C)
(setq org-default-priority ?A)

;;set colours for priorities
(setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))

;;open agenda in current window
(setq org-agenda-window-setup (quote current-window))

;;capture todo items using C-c c t
(define-key global-map (kbd "C-c c") 'org-capture)
(setq org-capture-templates
      '(("t" "Todo" entry (file "~/Dropbox/org/todo.org")
		 "* TODO [#B] %? :%^{Tags}:\n:Created: %U\n"  ; template
		 :prepend t        ; properties
		 :empty-lines 1    ; properties
		 :created t        ; properties
		 )
		("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
		 "* %?"
         "* %?\nCreated: %U\n  %i\n  %a"
		 :empty-lines 1)
		("n" "Note" entry (file+datetree "~/Dropbox/org/notes.org")
         "* %?\nCreated: %U\n  %i\n  %a"
         :empty-lines 1)
		("i" "Inbox" entry (file "~/Dropbox/org/inbox.org")
         "* %?\nCreated: %U\n  %i\n  %a"
         :empty-lines 1)
		("f" "filmgrammar todo" entry (file+headline "~/Dropbox/org/research.org" "Tasks")
		 "* TODO [#B] %? :%^{Tags}:filmgrammar:ucb:research:code:work:\n:Created: %U\n"  ; template
		 :prepend t        ; properties
		 :empty-lines 1    ; properties
		 :created t        ; properties
		 )
		))

(add-hook 'org-mode-hook
          (lambda ()
            (org-indent-mode t)
            (add-to-list 'org-tag-alist '("TOC" . ?T))
            (visual-line-mode t)
            (wc-mode t)


            )
          t)
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (visual-line-mode -1)
            (toggle-truncate-lines 1)))


(setq org-agenda-custom-commands
      '(
        ("h" "Daily habits" 
         ((agenda ""))
         ((org-agenda-show-log t)
          (org-agenda-ndays 7)
          (org-agenda-log-mode-items '(state))
          (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:")))
         );; end "h" view
        ("n" "Agenda and all TODO's"
         (
          ;;Agenda section
          (agenda ""
                  ((org-agenda-overriding-header "This week"))
                  )
          ;; todo section
          (tags-todo "-Wunderlist-habit"
                     ((org-agenda-overriding-header "To Do"))
                     )
          ;; Wunderlist Section
          (tags-todo "Wunderlist"
                     ((org-agenda-overriding-header "Wunderlist"))
                     )
          )
         );; end "n" view
        );;end list of custom views
      );end org-agenda-custom-commands call

;;open agenda in current window
(setq org-agenda-window-setup (quote current-window))
;;warn me of any deadlines in next 7 days
(setq org-deadline-warning-days 7)
;;don't show tasks as scheduled if they are already shown as a deadline
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;;don't give awarning colour to tasks with impending deadlines
;;if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
;;don't show tasks that are scheduled or have deadlines in the
;;normal todo list
(setq org-agenda-todo-ignore-deadlines (quote all))
(setq org-agenda-todo-ignore-scheduled (quote all))
;;sort tasks in order of when they are due and then by priority
(setq org-agenda-sorting-strategy
      (quote
       ((agenda habit-down deadline-up time-up priority-down)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep))))

(autoload 'org-wunderlist "org-wunderlist")
(setq org-wunderlist-client-id "aae80f661b848468d6f9"
      org-wunderlist-token "c463911f3592a80ae4a7e70a0bda6404a9a50fceb23a608a64756d64de1f"
      org-wunderlist-file  "~/Dropbox/org/Wunderlist.org"
      org-wunderlist-dir "~/Dropbox/org/org-wunderlist/")

(setq org-agenda-todo-ignore-scheduled 'future)
(setq org-agenda-tags-todo-honor-ignore-options t)
(setq org-modules '(org-bbdb
                    org-gnus
                    org-info
                    org-habit
                    org-mouse
                    org-protocol
                    org-ref
                    org-wc
                    toc-org
                    org-wunderlist
                    org-irc
                    ))

(eval-after-load 'org
  '(org-load-modules-maybe t))
;; Prepare stuff for org-export-backends
(setq org-export-backends '(org latex icalendar html ascii))

(defun ah/org-todo-custom-date (&optional arg)
  "Like org-todo-yesterday, but prompt the user for a date. The time
of change will be 23:59 on that day"
  (interactive "P")
  (let* ((hour (nth 2 (decode-time
                       (org-current-time))))
         (daysback (- (date-to-day (current-time-string)) (org-time-string-to-absolute (org-read-date))))
         (org-extend-today-until (+ 1 (* 24 (- daysback 1)) hour))
         (org-use-effective-time t)) ; use the adjusted timestamp for logging
    (if (eq major-mode 'org-agenda-mode)
        (org-agenda-todo arg)
      (org-todo arg))))


;; Mobile Org Setup
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
(setq org-directory "~/Dropbox/org")
(setq org-mobile-inbox-for-pull "~/Dropbox/org/flagged.org")
(setq org-mobile-use-encryption t)
(setq org-mobile-encryption-password "qX4yb12TKykaWx2P")
(setq org-habit-show-habits-only-for-today 1)
;; turn on mobile org auto syncing. doesn't work with osx yet.
;;(require 'org-mobile-sync)
;;(org-mobile-sync-mode 1)

;; My custom creative writing file format
(add-to-list 'auto-mode-alist '("\\.ink$" . org-mode))

(provide 'my_org_settings)
;; my_org_settings.el ends here
#+END_SRC  

* project management
#+BEGIN_SRC emacs-lisp
;;;; Projectile Mode
(setq projectile-mode t)

#+END_SRC  
* syntax
#+BEGIN_SRC emacs-lisp
;; web
(autoload 'web-mode "web-mode")
(add-to-list 'load-path "~/emacsBackup/.emacs.d/syntax-modes/")
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[gj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.vtl\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode));; Set PHP-Mode for php files.

(autoload 'tidy-buffer "tidy" "Run Tidy HTML parser on current buffer" t)
(autoload 'tidy-parse-config-file "tidy" "Parse the `tidy-config-file'" t)
(autoload 'tidy-save-settings "tidy" "Save settings to `tidy-config-file'" t)
(autoload 'tidy-build-menu  "tidy" "Install an options menu for HTML Tidy." t)


 (defun my-tidy-hook () "Customize my html-mode."
   (tidy-build-menu web-mode-map)
   (local-set-key (kbd "C-c t") 'tidy-buffer)
   (setq sgml-validate-command "tidy"))

 (add-hook 'web-mode-hook 'my-tidy-hook)
;;Markdown Mode
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; display “lambda” as “λ”
(global-prettify-symbols-mode 1)
(electric-pair-mode +1)

(setq electric-pair-pairs '(
                            (?\" . ?\")
                            (?\{ . ?\})
                            ) )

(add-hook
 'web-mode-hook
 '(lambda ()
    (setq web-mode-enable-auto-pairing nil)
    (setq-local
     electric-pair-pairs
     (append electric-pair-pairs '((?% . ?%))))))




;;Python Mode
(add-hook 'python-mode-hook 'my-python-mode-hook)
(defun my-python-mode-hook () 
  (rainbow-mode 1)
  (elpy-enable)
  (py-autopep8-enable-on-save)
  (jedi:setup)
  (setq jedi:complete-on-dot t)
  
  )
(setq django-indent-width 4)
(autoload 'py-autopep8 "py-autopep8")
(autoload 'py-isort "py-isort")
(require 'py-isort)
;;iPython Notebook
(autoload 'ein "ein")
(autoload 'python-django "python-django") 
;; enable autopep8 formatting on save
(add-hook 'before-save-hook 'py-isort-before-save)

;; end python

(autoload  'cc-mode "cc-mode")
(add-to-list 'auto-mode-alist '("\\.cu$" . cuda-mode))
(add-to-list 'auto-mode-alist '("\\.upc$" . c++-mode))




;; AucTeX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq TeX-PDF-mode t)

;; Use Skim as viewer, enable source <-> PDF sync
;; make latexmk available via C-c C-c
;; Note: SyncTeX is setup via ~/emacsBackup/.latexmkrc (see below)
(add-hook 'LaTeX-mode-hook (lambda ()
                             (push
                              '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
                                :help "Run latexmk on file")
                              TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))
;; use Skim as default pdf viewer
;; Skim's displayline is used for forward search (from .tex to .pdf)
;; option -b highlights the current line; option -g opens Skim in the background  
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
#+END_SRC  
* version control
#+BEGIN_SRC emacs-lisp
;;Store all backup files in C:/Temp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(put 'set-goal-column 'disabled nil)


;; Setup magit
( autoload 'magit-status "magit" nil t)
(global-set-key (kbd "C-x g") 'magit-status)

#+END_SRC  
* window management
 #+BEGIN_SRC emacs-lisp
;;Swap Windows & Frames quickly
(setq windmove-wrap-around t)
(global-set-key (kbd "M-s M-f") 'windmove-up)
(global-set-key (kbd "M-s M-s") 'windmove-down)
(global-set-key (kbd "M-s M-r") 'windmove-left)
(global-set-key (kbd "M-s M-t") 'windmove-right)
(global-set-key (kbd "M-s M-c") 'other-frame)

(global-set-key (kbd "<Shift-up>") 'windmove-up)
(global-set-key (kbd "<Shift-down>") 'windmove-down)
(global-set-key (kbd "<Shift-left>") 'windmove-left)
(global-set-key (kbd "<Shift-right>") 'windmove-right)

(defun split-window-horizontally-balanced ()
  (interactive)
  (split-window-horizontally)
  (balance-windows)
)
(defun split-window-vertically-balanced ()
  (interactive)
  (split-window-vertically)
  (balance-windows)
)
(global-set-key (kbd "C-c 2") 'split-window-vertically-balanced)
(global-set-key (kbd "C-c 3") 'split-window-horizontally-balanced)



#+END_SRC  


* godot
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/emacsBackup/.emacs.d/godot-gdscript.el/")
(require 'godot-gdscript)
(require 'company)
(require 'company-godot-gdscript)
(eval-after-load "company"
  '(progn
     (add-to-list 'company-backends 'company-godot-gdscript)))
(add-hook 'godot-gdscript-mode-hook 'company-mode)

#+END_SRC  
* navigation settings
#+BEGIN_SRC emacs-lisp
(require 'phi-rectangle)
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

(defun helm-find-file-as-root ()
  "Like `ido-find-file, but automatically edit the file with
root-privileges (using tramp/sudo), if the file is not writable by
user."
  (interactive)
  (let ((file (helm-read-file-name "Edit as root: ")))
    (unless (file-writable-p file)
      (setq file (concat "/sudo:root@localhost:" file)))
    (helm-find-file file)))
;; or some other keybinding...
(global-set-key (kbd "C-c C-x C-f") 'helm-find-file-as-root)
#+END_SRC  

